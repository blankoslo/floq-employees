buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:0.10'
    }
}

plugins {
  id "com.moowork.node" version "0.10"
}


apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'com.moowork.node'

repositories {
    mavenCentral()
}

def buildScalaVersion = "2.11.6"
def mainVersionScala = "2.11"
def unfilteredVersion = "0.8.4"

applicationName = "employees"
mainClassName = "no.employees.Application"

dependencies {
    compile "org.scala-lang:scala-library:$buildScalaVersion"

    compile "net.databinder:unfiltered-filter_$mainVersionScala:$unfilteredVersion"
    compile "net.databinder:unfiltered-json4s_$mainVersionScala:$unfilteredVersion"
    compile "net.databinder:unfiltered-jetty_$mainVersionScala:$unfilteredVersion"
    compile "net.databinder:unfiltered-directives_$mainVersionScala:$unfilteredVersion"
    compile "net.databinder.dispatch:dispatch-core_$mainVersionScala:0.11.2"

    compile "org.eclipse.jetty:jetty-servlets:7.6.9.v20130131"

    compile "com.github.tminglei:slick-pg_$mainVersionScala:0.9.0"
    compile "org.scalaz:scalaz-core_$mainVersionScala:7.0.6"
    compile "io.argonaut:argonaut_$mainVersionScala:6.1"
    compile "com.jteigen:linx_$mainVersionScala:0.2"
    compile "ch.qos.logback:logback-classic:1.1.3"

    compile("org.postgresql:postgresql:9.4-1200-jdbc41"){
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    compile "com.typesafe.slick:slick_$mainVersionScala:3.0.0"

    compile "org.json4s:json4s-native_$mainVersionScala:3.2.11"
    compile "org.json4s:json4s-jackson_$mainVersionScala:3.2.11"

    testCompile "com.h2database:h2:1.4.185"
    testCompile "org.scalatest:scalatest_$mainVersionScala:2.2.4"
    testCompile "junit:junit:4.12"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

node {
    // Version of node to use.
    version = '0.12.4'

    // Enabled the automatic download. False is the default (for now).
    download = true

    // Set the work directory for unpacking node
      workDir = file("${project.buildDir}/nodejs")

      // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/frontend")
}

sourceSets {
    main {
        scala {
            srcDir 'src/main/scala'
        }
        resources {
            srcDir 'frontend/public'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

task buildFrontend(type: NpmTask, dependsOn: ['npmInstall']) {
  execOverrides {
    it.workingDir = file("${project.projectDir}/frontend")
  }
  args = ['run', 'minify']
}

task watchFrontend(type: NpmTask, dependsOn: ['npmInstall']) {
    execOverrides {
        it.workingDir = file("${project.projectDir}/frontend")
    }
    args = ['run', 'watch']
}

task stage(dependsOn: ['clean', 'installDist', 'buildFrontend'])

buildFrontend.mustRunAfter clean
installDist.mustRunAfter buildFrontend
